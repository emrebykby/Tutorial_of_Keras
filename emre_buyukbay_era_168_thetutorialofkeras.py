# -*- coding: utf-8 -*-
"""EMRE BUYUKBAY ERA-168 TheTutorialofKeras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p-1jn6OPa64ntcE7y6uW_yrE6O0w5wU2

***EMRE BUYUKBAY ERA-168 KERAS LIBRARY TUTORIAL***

---

---
# ***Note: For run the code we need to run the blocks orderly.***


---

First of all we can start this tutorial with what is Python.

>Python, one of the most popular programming languages in the world, has created everything from Netflix’s recommendation algorithm to the software that controls self-driving cars. Python is a general-purpose language, which means it’s designed to be used in a range of applications, including data science, software and web development, automation, and generally getting stuff done. So we are using Python for machine learning and deep learning because of these reosens.


---

Secondly, we can continue with short introduction of Keras library and machine learning.

> Keras is a high-level, deep learning API developed by Google for implementing neural networks. Keras is relatively easy to learn and work with because it provides a python frontend with a high level of abstraction while having the option of multiple back-ends for computation purposes. This makes Keras slower than other deep learning frameworks, but extremely beginner-friendly.


---



**Keras allows you to switch between different back ends. The frameworks supported by Keras are:**


*   Tensorflow
*   Theano
*   PlaidML
*   MXNet
*   CNTK (Microsoft Cognitive Toolkit)

Out of these five frameworks, TensorFlow has adopted Keras as its official high-level API.


---

Lasty the environment. We can use several programs and IDEs for machine learning development but I used Google COLAB.


> Colaboratory ("Colab" for short)  is a data analysis and machine learning tool that allows you to combine executable Python code and rich text along with charts, images, HTML, LaTeX and more into a single document stored in Google Drive.

For these reasons I thought it will be easier and faster using Google COLAB.

---

First we need to instal the libaries that we will use 

The sample installation is like that

`$ pip install tensorflow`

###### We installed tensorflow becasue Keras is integradet within Tensorflow library.
---

---


*But here we are using Google Colab which has a lot of this kind of libraries installed. So we don't need to install these libaries again.*

---

Then we need to import the libraries that we will use.
"""

import tensorflow #Before importing Keras we need to import this
from tensorflow import keras 
import numpy as np #We need this library for some math 
import pandas as pd #This will allow us to read in our data
import matplotlib.pyplot as plt #This will let us graph our lineer regression data

"""We need a data to work with. I found a csv file on the internet that includes house prices that depends squarefeet."""

df = pd.read_csv('drive/MyDrive/Colab Notebooks/IowaHousingPrices.csv') #We are adding our data file (csv) to code using pandas

"""Now we will create two variable that will store values which is written in csv file"""

squareFeet = df[['SquareFeet']].values #We are reading squarefeet coulmn datas and store in our variable
salePrice = df[['SalePrice']].values #We are reading Saleprice coulmn datas and store in our variable

"""Finally we will create our model with Keras

When we run this block of code our model will be trained

"""

model = tensorflow.keras.Sequential() #At the beginning of using Keras model we need to identify our model like that
model.add(tensorflow.keras.layers.Dense(1, input_shape=(1,))) #Dense allow us to identify how much neural learning will enter and also how much input we will insert. We are only giving squarefeet input so we made it 1
model.compile(tensorflow.keras.optimizers.Adam(learning_rate = 1), 'mean_squared_error') #With this line of code we are compiling our model with optimizers. optimizers will reduce error. I used Adam optimizer but there a lots but Adam is best one and faster than others. Also we set learning range to 1 but it is actually big number but we are dealing with not much data (generraly it sets under 0.5) and we used mean square error that will make error a sqaure then Adam optimizer easily reduce that error box
model.fit(squareFeet,salePrice, epochs=30, batch_size=10) #In here we train our model. we give x parameter as squareFeet and y paramter as salePrice. epochs is set to 30 and it means the model will read through data 30 times and  batch size is set 10 and it means the model will read 10 data at a time. Normally it is ibg but our data is not too much.

"""After tranning our model we can now plot it with graph"""

df.plot(kind='scatter', x='SquareFeet', y='SalePrice', title='Housing Prices and Square Footage') #We are plotting our model with datafrane plot which is in Pandas Library
y_pred = model.predict(squareFeet) #We are making a prediction with squarefeet values.
plt.plot(squareFeet, y_pred, color = 'red')

"""Now we trained our model and we can predict a house price with creating new variable and sending it to our model"""

newSF = [1562] #we are creating a array which is keeping our input value.
outputPredict = tensorflow.convert_to_tensor(newSF) #To make prediction we need to convert our array to tensorflow array becasue model.predict function working with tensorflow arrays.
answerModel = model.predict(outputPredict) #then we are makşing prediction
lastOne = np.round(answerModel,0) #to get more understandable result wer are rounding our output.
print("Output Sale Price : ",lastOne)

"""

---



---



---


THE END

We can improve our model and program but this was a beginner guide.

We can understand machine learning environment and keras library which is used 
for machine learning and deep learning.

*Thank You*

*Emre BUYUKBAY*

*ERA-168*


---



---



---

"""